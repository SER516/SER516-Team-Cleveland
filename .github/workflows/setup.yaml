# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
  pull_request:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    strategy:
      matrix:
        python-version: [3.12.2]
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Switch to Current Branch
        run: git checkout ${{ env.BRANCH }}
              
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd taigaProject
          pip install -r requirements.txt
          pip install -e .

      - name: Run unit tests and coverage
        run: |
          pytest --exitfirst --verbose --failed-first --cov=. --cov-report html 

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./htmlcov
    
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Get artifact URL
        id: coverage_artifact
        run: echo "::set-output name=url::${{ steps.build.outputs.artifacts_url }}/coverage-report/htmlcov/index.html"

      - name: Create coverage report comment
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            github.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Coverage report: ${{ steps.coverage_artifact.outputs.url }}'
            })